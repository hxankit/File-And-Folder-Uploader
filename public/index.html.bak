<!doctype html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>File Management System</title>
    <style>
      body { 
        font-family: Arial, sans-serif; 
        max-width: 1000px; 
        margin: 2rem auto; 
        background: #f5f5f5;
        padding: 20px;
      }
      
      .container {
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        padding: 20px;
      }

      .header {
        background: #2196F3;
        color: white;
        padding: 20px;
        border-radius: 8px;
        margin-bottom: 20px;
      }

      .header h1 {
        margin: 0;
      }

      .upload-section {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
        margin-bottom: 20px;
      }

      .upload-box {
        border: 2px dashed #ccc;
        padding: 20px;
        border-radius: 8px;
        text-align: center;
        background: #f9f9f9;
      }

      .upload-box:hover {
        border-color: #2196F3;
      }

      .upload-box h3 {
        margin-top: 0;
        color: #333;
      }

      .file-input-wrapper {
        margin: 10px 0;
      }

      .upload-button {
        background: #2196F3;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 4px;
        cursor: pointer;
        margin-top: 10px;
      }

      .upload-button:hover {
        background: #1976D2;
      }

      .file-manager {
        background: white;
        border-radius: 8px;
        overflow: hidden;
      }

      .file-list-header {
        background: #f5f5f5;
        padding: 10px 20px;
        font-weight: bold;
        border-bottom: 1px solid #eee;
        display: grid;
        grid-template-columns: 40px 1fr auto;
        gap: 10px;
        align-items: center;
      }

      .file-item {
        display: grid;
        grid-template-columns: 40px 1fr auto;
        gap: 10px;
        align-items: center;
        padding: 10px 20px;
        border-bottom: 1px solid #eee;
        transition: background 0.2s;
      }

      .file-item:hover {
        background: #f5f5f5;
      }

      .file-name {
        display: flex;
        align-items: center;
        gap: 10px;
      }

      .file-actions {
        display: flex;
        gap: 10px;
      }

      .action-button {
        padding: 6px 12px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
      }

      .download-btn {
        background: #4CAF50;
        color: white;
      }

      .download-btn:hover {
        background: #388E3C;
      }

      .delete-btn {
        background: #FF5252;
        color: white;
      }

      .delete-btn:hover {
        background: #D32F2F;
      }

      .folder-icon::before {
        content: "üìÅ";
        font-size: 20px;
      }

      .file-icon::before {
        content: "üìÑ";
        font-size: 20px;
      }

      .progress-bar {
        width: 100%;
        height: 4px;
        background: #eee;
        border-radius: 2px;
        margin-top: 10px;
        display: none;
      }

      .progress-bar-fill {
        height: 100%;
        background: #2196F3;
        border-radius: 2px;
        width: 0%;
        transition: width 0.3s;
      }

      .toast {
        position: fixed;
        bottom: 20px;
        right: 20px;
        padding: 10px 20px;
        border-radius: 4px;
        color: white;
        opacity: 0;
        transition: opacity 0.3s;
      }

      .toast.success {
        background: #4CAF50;
      }

      .toast.error {
        background: #FF5252;
      }

      .status-text {
        margin-top: 10px;
        color: #666;
      }

      @media (max-width: 768px) {
        .upload-section {
          grid-template-columns: 1fr;
        }
      }
    </style>
  </head>
  <body>
    <div class="header">
      <h1>File Management System</h1>
    </div>

    <div class="container">
      <div class="upload-section">
        <div class="upload-box">
          <h3>Upload Folder</h3>
          <div class="file-input-wrapper">
            <input id="folder" type="file" webkitdirectory directory multiple />
          </div>
          <button id="upload" class="upload-button">Upload Folder</button>
          <div class="progress-bar" id="folderProgress">
            <div class="progress-bar-fill"></div>
          </div>
          <div class="status-text" id="folderStatus"></div>
        </div>

        <div class="upload-box">
          <h3>Upload Zip File</h3>
          <div class="file-input-wrapper">
            <input id="zip" type="file" accept=".zip" />
          </div>
          <button id="uploadZip" class="upload-button">Upload Zip</button>
          <div class="progress-bar" id="zipProgress">
            <div class="progress-bar-fill"></div>
          </div>
          <div class="status-text" id="zipStatus"></div>
        </div>
      </div>

      <div class="file-manager">
        <div class="file-list-header">
          <div>Type</div>
          <div>Name</div>
          <div>Actions</div>
        </div>
        <div id="fileManager"></div>
      </div>
    </div>

    <div id="toast" class="toast"></div>

    <style>
      .file-manager {
        border: 1px solid #eee;
        padding: 1rem;
        margin-top: 1rem;
      }
      .file-item {
        display: flex;
        align-items: center;
        padding: 0.5rem;
        border-bottom: 1px solid #eee;
      }
      .file-item:last-child {
        border-bottom: none;
      }
      .file-name {
        flex: 1;
        margin-right: 1rem;
      }
      .file-actions {
        display: flex;
        gap: 0.5rem;
      }
      .file-actions button {
        padding: 0.25rem 0.5rem;
      }
      .folder-icon::before {
        content: "üìÅ";
        margin-right: 0.5rem;
      }
      .file-icon::before {
        content: "üìÑ";
        margin-right: 0.5rem;
      }
    </style>

    <script>
      const folderInput = document.getElementById('folder');
      const zipInput = document.getElementById('zip');
      const uploadBtn = document.getElementById('upload');
      const uploadZipBtn = document.getElementById('uploadZip');
      const log = document.getElementById('log');

      function append(s) { log.textContent += s + '\n'; }

      async function uploadFiles(files, isZip = false) {
        if (!files || files.length === 0) { 
          append('No files selected'); 
          return; 
        }

        const fd = new FormData();
        for (const f of files) {
          if (isZip) {
            fd.append('files', f, f.name);
          } else {
            // Use webkitRelativePath when available to preserve folder structure
            const relative = f.webkitRelativePath || f.name;
            // Append each file with its relative path as the filename so server can use originalname
            fd.append('files', f, relative);
          }
        }

        append(`Uploading ${files.length} file${files.length > 1 ? 's' : ''}...`);
        try {
          const resp = await fetch('/upload', { method: 'POST', body: fd });
          const data = await resp.json();
          append('Server response: ' + JSON.stringify(data));
        } catch (err) {
          append('Upload error: ' + err.message);
        }
      }

      uploadBtn.addEventListener('click', () => {
        uploadFiles(folderInput.files).then(refreshFileManager);
      });
      
      uploadZipBtn.addEventListener('click', () => {
        uploadFiles(zipInput.files, true).then(refreshFileManager);
      });

      const fileManager = document.getElementById('fileManager');

      async function deleteItem(path) {
        if (!confirm('Are you sure you want to delete this item?')) {
          return;
        }

        try {
          const response = await fetch(`/delete?path=${encodeURIComponent(path)}`, {
            method: 'DELETE'
          });
          const data = await response.json();
          
          if (data.ok) {
            append('Deleted: ' + path);
            refreshFileManager();
          } else {
            append('Delete failed: ' + data.error);
          }
        } catch (err) {
          append('Delete error: ' + err.message);
        }
      }

      async function refreshFileManager() {
        try {
          const response = await fetch('/files');
          const data = await response.json();
          
          if (data.ok) {
            fileManager.innerHTML = '';
            
            // Group files by folders
            const filesByFolder = {};
            data.files.forEach(file => {
              const parts = file.path.split('/');
              if (parts.length === 1) {
                // Root level files
                if (!filesByFolder['']) {
                  filesByFolder[''] = [];
                }
                filesByFolder[''].push(file);
              } else {
                // Files in folders
                const folder = parts[0];
                if (!filesByFolder[folder]) {
                  filesByFolder[folder] = [];
                }
                filesByFolder[folder].push(file);
              }
            });

            // Create folder and file elements
            Object.entries(filesByFolder).forEach(([folder, files]) => {
              if (folder) {
                // Folder item
                const div = document.createElement('div');
                div.className = 'file-item';
                div.innerHTML = `
                  <span class="file-name folder-icon">${folder}</span>
                  <div class="file-actions">
                    <button onclick="window.location.href='/download?path=${encodeURIComponent(folder)}'">Download</button>
                    <button onclick="deleteItem('${folder}')" style="background:#ff4444;color:white">Delete</button>
                  </div>
                `;
                fileManager.appendChild(div);
              }

              // Individual files
              files.forEach(file => {
                if (!folder || file.path !== folder) {  // Skip folder entries
                  const div = document.createElement('div');
                  div.className = 'file-item';
                  div.innerHTML = `
                    <span class="file-name file-icon">${file.path}</span>
                    <div class="file-actions">
                      <button onclick="window.location.href='/download?path=${encodeURIComponent(file.path)}'">Download</button>
                      <button onclick="deleteItem('${file.path}')" style="background:#ff4444;color:white">Delete</button>
                    </div>
                  `;
                  fileManager.appendChild(div);
                }
              });
            });
          }
        } catch (err) {
          append('Error loading file list: ' + err.message);
        }
      }

      // Initial load of file manager
      refreshFileManager();
    </script>
  </body>
  </html>
